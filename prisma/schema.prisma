generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  fullname  String         @db.VarChar(50)
  password  String         @db.VarChar(100)
  email     String         @unique @db.VarChar(100)
  avatar    String?
  gender    Gender
  isLock    Boolean        @default(false)
  role      Role           @default(USER)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  videos    Video[]
  subs      Subscription[] @relation("user")
  subUsers  Subscription[] @relation("sub_user")
  comments  Comment[]

  @@map("users")
}

model LiveStream {
  id        String   @id @default(uuid())
  liveKey   String   @db.VarChar(20)
  status    Status   @default(IDLE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Video     Video[]

  @@map("livestreams")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(20) @unique
  index     Int      @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Video     Video[]

  @@map("categories")
}

model Video {
  id             String      @id @default(uuid())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  livestream     LiveStream? @relation(fields: [livestreamId], references: [id], onDelete: Cascade)
  userId         String
  categoryId     String
  livestreamId   String?
  title          String      @db.VarChar(100)
  desc           String      @db.VarChar(200)
  path           String?
  thumbnail      String?
  views          Int         @default(0)
  like           Int         @default(0)
  dislike        Int         @default(0)
  metadata       Json?
  disableComment Boolean     @default(false)
  isLive         Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  comments       Comment[]

  @@map("videos")
}

model Subscription {
  id        String   @id @default(uuid())
  user      User     @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
  sup_user  User     @relation(name: "sub_user", fields: [supUserId], references: [id], onDelete: Cascade)
  userId    String
  supUserId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  content   String   @db.VarChar(200)
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Task {
  id        String   @id @default(uuid())
  type      TaskType
  status    Status
  metadata  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  FEMALE
  MALE
}

enum Status {
  IDLE
  PROCESS
  SUCCESS
  ERROR
}

enum CheckinType {
  QR
  Face
  PhoneOrEmail
}

enum TaskType {
  TranscodeVideo
  TranscodeLive
}
